/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 * GupMassnahmeSohle.java
 *
 * Created on 19.10.2011, 11:49:19
 */
package de.cismet.cids.custom.objecteditors.wrrl_db_mv;

import Sirius.navigator.connection.SessionManager;

import Sirius.server.search.CidsServerSearch;

import com.vividsolutions.jts.geom.Geometry;

import java.awt.EventQueue;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseListener;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import de.cismet.cids.custom.wrrl_db_mv.server.search.WbvSearch;
import de.cismet.cids.custom.wrrl_db_mv.util.CidsBeanSupport;

import de.cismet.cids.dynamics.CidsBean;

import de.cismet.cids.editors.DefaultCustomObjectEditor;
import de.cismet.cids.editors.EditorClosedEvent;
import de.cismet.cids.editors.EditorSaveListener;

import de.cismet.cids.tools.metaobjectrenderer.CidsBeanRenderer;

/**
 * DOCUMENT ME!
 *
 * @author   therter
 * @version  $Revision$, $Date$
 */
public class GupGewaesserabschnittAllgemein extends javax.swing.JPanel implements CidsBeanRenderer, EditorSaveListener {

    //~ Static fields/initializers ---------------------------------------------

    private static final org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(
            GupGewaesserabschnittAllgemein.class);

    private static final List<String> PROPERTY_LIST = new ArrayList<String>();

    static {
        PROPERTY_LIST.add("gup_massnahmen_sohle");
        PROPERTY_LIST.add("gup_massnahmen_sonstige");
        PROPERTY_LIST.add("gup_massnahmen_ufer_links");
        PROPERTY_LIST.add("gup_massnahmen_ufer_rechts");
        PROPERTY_LIST.add("abschnittsinfo");
    }

    //~ Instance fields --------------------------------------------------------

    private CidsBean cidsBean;
    private boolean readOnly = false;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private de.cismet.tools.gui.RoundedPanel glassPanel;
    private javax.swing.JLabel lblGewaessername;
    private javax.swing.JLabel lblGwk;
    private javax.swing.JLabel lblPlanungseinheit;
    private javax.swing.JLabel lblUnterhaltung;
    private javax.swing.JLabel lblWbvCode;
    private javax.swing.JScrollPane spBemerkung;
    private javax.swing.JTextArea taUnterhaltung;
    private javax.swing.JTextField txtGewaessername;
    private javax.swing.JTextField txtGwk;
    private javax.swing.JTextField txtPlanungseinheit;
    private javax.swing.JTextField txtWbv;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form GupMassnahmeSohle.
     */
    public GupGewaesserabschnittAllgemein() {
        this(false);
    }

    /**
     * Creates new form GupMassnahmeSohle.
     *
     * @param  readOnly  DOCUMENT ME!
     */
    public GupGewaesserabschnittAllgemein(final boolean readOnly) {
        this.readOnly = readOnly;
        initComponents();

        setReadOnly(readOnly);
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        glassPanel = new de.cismet.tools.gui.RoundedPanel();
        lblGewaessername = new javax.swing.JLabel();
        lblGwk = new javax.swing.JLabel();
        lblWbvCode = new javax.swing.JLabel();
        lblUnterhaltung = new javax.swing.JLabel();
        txtGewaessername = new javax.swing.JTextField();
        spBemerkung = new javax.swing.JScrollPane();
        taUnterhaltung = new javax.swing.JTextArea();
        txtGwk = new javax.swing.JTextField();
        txtWbv = new javax.swing.JTextField();
        lblPlanungseinheit = new javax.swing.JLabel();
        txtPlanungseinheit = new javax.swing.JTextField();

        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(994, 500));
        setLayout(new java.awt.GridBagLayout());

        glassPanel.setAlpha(0);
        glassPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(glassPanel, gridBagConstraints);

        lblGewaessername.setText(org.openide.util.NbBundle.getMessage(
                GupGewaesserabschnittAllgemein.class,
                "GupGewaesserabschnittAllgemein.lblGewaessername.text")); // NOI18N
        lblGewaessername.setMaximumSize(new java.awt.Dimension(170, 17));
        lblGewaessername.setMinimumSize(new java.awt.Dimension(170, 17));
        lblGewaessername.setPreferredSize(new java.awt.Dimension(170, 17));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 15, 5, 5);
        add(lblGewaessername, gridBagConstraints);

        lblGwk.setText(org.openide.util.NbBundle.getMessage(
                GupGewaesserabschnittAllgemein.class,
                "GupGewaesserabschnittAllgemein.lblGwk.text")); // NOI18N
        lblGwk.setMaximumSize(new java.awt.Dimension(170, 17));
        lblGwk.setMinimumSize(new java.awt.Dimension(170, 17));
        lblGwk.setPreferredSize(new java.awt.Dimension(170, 17));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        add(lblGwk, gridBagConstraints);

        lblWbvCode.setText(org.openide.util.NbBundle.getMessage(
                GupGewaesserabschnittAllgemein.class,
                "GupGewaesserabschnittAllgemein.lblWbvCode.text")); // NOI18N
        lblWbvCode.setMaximumSize(new java.awt.Dimension(170, 17));
        lblWbvCode.setMinimumSize(new java.awt.Dimension(170, 17));
        lblWbvCode.setPreferredSize(new java.awt.Dimension(170, 17));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        add(lblWbvCode, gridBagConstraints);

        lblUnterhaltung.setText(org.openide.util.NbBundle.getMessage(
                GupGewaesserabschnittAllgemein.class,
                "GupGewaesserabschnittAllgemein.lblUnterhaltung.text")); // NOI18N
        lblUnterhaltung.setMaximumSize(new java.awt.Dimension(170, 17));
        lblUnterhaltung.setMinimumSize(new java.awt.Dimension(170, 17));
        lblUnterhaltung.setPreferredSize(new java.awt.Dimension(170, 17));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        add(lblUnterhaltung, gridBagConstraints);

        txtGewaessername.setEnabled(false);
        txtGewaessername.setMaximumSize(new java.awt.Dimension(280, 20));
        txtGewaessername.setMinimumSize(new java.awt.Dimension(280, 20));
        txtGewaessername.setPreferredSize(new java.awt.Dimension(380, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 5, 5, 15);
        add(txtGewaessername, gridBagConstraints);

        spBemerkung.setMaximumSize(new java.awt.Dimension(280, 90));
        spBemerkung.setMinimumSize(new java.awt.Dimension(280, 90));
        spBemerkung.setPreferredSize(new java.awt.Dimension(280, 90));

        taUnterhaltung.setColumns(20);
        taUnterhaltung.setRows(5);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.unterhaltung}"),
                taUnterhaltung,
                org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        spBemerkung.setViewportView(taUnterhaltung);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 15);
        add(spBemerkung, gridBagConstraints);

        txtGwk.setEnabled(false);
        txtGwk.setMaximumSize(new java.awt.Dimension(280, 20));
        txtGwk.setMinimumSize(new java.awt.Dimension(280, 20));
        txtGwk.setPreferredSize(new java.awt.Dimension(380, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 15);
        add(txtGwk, gridBagConstraints);

        txtWbv.setEnabled(false);
        txtWbv.setMaximumSize(new java.awt.Dimension(280, 20));
        txtWbv.setMinimumSize(new java.awt.Dimension(280, 20));
        txtWbv.setPreferredSize(new java.awt.Dimension(380, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 15);
        add(txtWbv, gridBagConstraints);

        lblPlanungseinheit.setText(org.openide.util.NbBundle.getMessage(
                GupGewaesserabschnittAllgemein.class,
                "GupGewaesserabschnittAllgemein.lblPlanungseinheit.text")); // NOI18N
        lblPlanungseinheit.setMaximumSize(new java.awt.Dimension(170, 17));
        lblPlanungseinheit.setMinimumSize(new java.awt.Dimension(170, 17));
        lblPlanungseinheit.setPreferredSize(new java.awt.Dimension(170, 17));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        add(lblPlanungseinheit, gridBagConstraints);

        txtPlanungseinheit.setMaximumSize(new java.awt.Dimension(280, 20));
        txtPlanungseinheit.setMinimumSize(new java.awt.Dimension(280, 20));
        txtPlanungseinheit.setPreferredSize(new java.awt.Dimension(380, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.planungseinheit}"),
                txtPlanungseinheit,
                org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 15);
        add(txtPlanungseinheit, gridBagConstraints);

        bindingGroup.bind();
    } // </editor-fold>//GEN-END:initComponents

    @Override
    public CidsBean getCidsBean() {
        return this.cidsBean;
    }

    @Override
    public void setCidsBean(final CidsBean cidsBean) {
        bindingGroup.unbind();
        this.cidsBean = cidsBean;

        if (cidsBean != null) {
            DefaultCustomObjectEditor.setMetaClassInformationToMetaClassStoreComponentsInBindingGroup(
                bindingGroup,
                cidsBean);
            bindingGroup.bind();

            new Thread(new Runnable() {

                    @Override
                    public void run() {
                        refreshLabels();
                    }
                }).start();
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @param  readOnly  DOCUMENT ME!
     */
    public void setReadOnly(final boolean readOnly) {
        if (readOnly) {
            glassPanel.addMouseListener(new MouseAdapter() {
                });
        } else {
            for (final MouseListener ml : glassPanel.getMouseListeners()) {
                glassPanel.removeMouseListener(ml);
            }
        }
    }

    /**
     * DOCUMENT ME!
     */
    public void refreshLabels() {
        String wbv = "";
        String gwk = "";
        String gewName = "";

        try {
            final CidsBean statLine = getStationLinie();
            if (statLine != null) {
                final CidsBean statVon = (CidsBean)statLine.getProperty("von");
                if (statVon != null) {
                    final CidsBean route = (CidsBean)statVon.getProperty("route");
                    if (route != null) {
                        final CidsBean geomEntry = (CidsBean)statLine.getProperty("geom");
                        final Geometry geom = ((geomEntry != null) ? (Geometry)geomEntry.getProperty("geo_field")
                                                                   : null);
                        gwk = route.getProperty("gwk").toString();
                        gewName = route.getProperty("routenname").toString();
                        final double start = getMinStart();
                        final double end = getMaxEnd();

                        if (!gwk.equals("") && (start != -1) && (end != -1)) {
                            final CidsServerSearch search = new WbvSearch(String.valueOf(start),
                                    String.valueOf(end),
                                    gwk);
                            final Collection res = SessionManager.getProxy()
                                        .customServerSearch(SessionManager.getSession().getUser(), search);
                            final ArrayList<ArrayList> resArray = (ArrayList<ArrayList>)res;

                            if ((resArray != null) && (resArray.size() > 0) && (resArray.get(0).size() > 0)) {
                                final Object o = resArray.get(0).get(0);

                                if (o instanceof String) {
                                    wbv = o.toString();
                                }
                            } else {
                                LOG.error("Server error in getWk_k(). Cids server search return null. " // NOI18N
                                            + "See the server logs for further information");     // NOI18N
                            }
                        }
                    }
                }
            }
        } catch (final Exception e) {
            LOG.error("Error while determining the water body", e);
        }

        final String gwkV = gwk;
        final String gewNameV = gewName;
        final String wbvV = wbv;

        EventQueue.invokeLater(new Runnable() {

                @Override
                public void run() {
                    txtGwk.setText(gwkV);
                    txtGewaessername.setText(gewNameV);
                    txtWbv.setText(wbvV);
                }
            });
    }

    /**
     * DOCUMENT ME!
     *
     * @return  die erste station_linie, die im gewaesser gefunden wird
     */
    public CidsBean getStationLinie() {
        for (int i = 0; i < PROPERTY_LIST.size(); ++i) {
            final List<CidsBean> beans = CidsBeanSupport.getBeanCollectionFromProperty(cidsBean, PROPERTY_LIST.get(i));

            if ((beans != null) && (beans.size() > 0)) {
                return (CidsBean)beans.get(0).getProperty("linie");
            }
        }

        return null;
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public double getMinStart() {
        double minStart = -1;

        for (int i = 0; i < PROPERTY_LIST.size(); ++i) {
            final List<CidsBean> beans = CidsBeanSupport.getBeanCollectionFromProperty(cidsBean, PROPERTY_LIST.get(i));

            if ((beans != null) && (beans.size() > 0)) {
                final CidsBean line = (CidsBean)beans.get(0).getProperty("linie");
                if (line != null) {
                    final CidsBean start = (CidsBean)line.getProperty("von");
                    if (start != null) {
                        final Double value = (Double)start.getProperty("wert");

                        if (value != null) {
                            if ((minStart == -1) || (minStart > value.doubleValue())) {
                                minStart = value.doubleValue();
                            }
                        }
                    }
                }
            }
        }

        return minStart;
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public double getMaxEnd() {
        double maxEnd = -1;

        for (int i = 0; i < PROPERTY_LIST.size(); ++i) {
            final List<CidsBean> beans = CidsBeanSupport.getBeanCollectionFromProperty(cidsBean, PROPERTY_LIST.get(i));

            if ((beans != null) && (beans.size() > 0)) {
                final CidsBean line = (CidsBean)beans.get(0).getProperty("linie");
                if (line != null) {
                    final CidsBean end = (CidsBean)line.getProperty("bis");
                    if (end != null) {
                        final Double value = (Double)end.getProperty("wert");

                        if (value != null) {
                            if ((maxEnd == -1) || (maxEnd < value.doubleValue())) {
                                maxEnd = value.doubleValue();
                            }
                        }
                    }
                }
            }
        }

        return maxEnd;
    }

    @Override
    public void dispose() {
        bindingGroup.unbind();
    }

    @Override
    public String getTitle() {
        return "Gewässerabschnitt";
    }

    @Override
    public void setTitle(final String title) {
    }

    @Override
    public void editorClosed(final EditorClosedEvent event) {
    }

    @Override
    public boolean prepareForSave() {
        return true;
    }
}
