/*
 *  Copyright (C) 2010 stefan
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * WkFgPanOne.java
 *
 * Created on 04.08.2010, 13:44:05
 */
package de.cismet.cids.custom.objecteditors.wrrl_db_mv;

import de.cismet.cids.dynamics.CidsBean;
import de.cismet.cids.dynamics.DisposableCidsBeanStore;
import de.cismet.cids.editors.DefaultCustomObjectEditor;

/**
 *
 * @author stefan
 */
public class WkFgPanTwo extends javax.swing.JPanel implements DisposableCidsBeanStore {
    private CidsBean cidsBean;
    /** Creates new form WkFgPanOne */
    public WkFgPanTwo() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        panQuality = new de.cismet.tools.gui.RoundedPanel();
        panHeadQuality = new de.cismet.tools.gui.SemiRoundedPanel();
        lblHeading = new javax.swing.JLabel();
        panQualityContent = new javax.swing.JPanel();
        lblEcoStat = new javax.swing.JLabel();
        lblEcoPot = new javax.swing.JLabel();
        lblChemStat = new javax.swing.JLabel();
        lblHydromorph = new javax.swing.JLabel();
        lblZiel = new javax.swing.JLabel();
        lblSchutzgut = new javax.swing.JLabel();
        lblPadWithin = new javax.swing.JLabel();
        lblPadStat = new javax.swing.JLabel();
        txtZiel = new javax.swing.JTextField();
        cbEcoStat = new de.cismet.cids.editors.DefaultBindableReferenceCombo();
        cbEcoPot = new de.cismet.cids.editors.DefaultBindableReferenceCombo();
        cbChemStat = new de.cismet.cids.editors.DefaultBindableReferenceCombo();
        cbHydromorph = new de.cismet.cids.editors.DefaultBindableReferenceCombo();
        cbSchutzgut = new de.cismet.cids.editors.DefaultBindableReferenceCombo();
        cbPadStat = new de.cismet.cids.editors.DefaultBindableReferenceCombo();
        cbPadWithin = new de.cismet.cids.editors.DefaultBindableReferenceCombo();
        lblSpace = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(450, 290));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(450, 290));
        setLayout(new java.awt.BorderLayout());

        panHeadQuality.setBackground(new java.awt.Color(51, 51, 51));
        panHeadQuality.setMinimumSize(new java.awt.Dimension(109, 24));
        panHeadQuality.setPreferredSize(new java.awt.Dimension(109, 24));
        panHeadQuality.setLayout(new java.awt.FlowLayout());

        lblHeading.setForeground(new java.awt.Color(255, 255, 255));
        lblHeading.setText(org.openide.util.NbBundle.getMessage(WkFgPanTwo.class, "WkFgPanTwo.lblHeading.text")); // NOI18N
        panHeadQuality.add(lblHeading);

        panQuality.add(panHeadQuality, java.awt.BorderLayout.NORTH);

        panQualityContent.setMinimumSize(new java.awt.Dimension(450, 260));
        panQualityContent.setOpaque(false);
        panQualityContent.setPreferredSize(new java.awt.Dimension(450, 260));
        panQualityContent.setLayout(new java.awt.GridBagLayout());

        lblEcoStat.setText(org.openide.util.NbBundle.getMessage(WkFgPanTwo.class, "WkFgPanTwo.lblEcoStat.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 5, 5);
        panQualityContent.add(lblEcoStat, gridBagConstraints);

        lblEcoPot.setText(org.openide.util.NbBundle.getMessage(WkFgPanTwo.class, "WkFgPanTwo.lblEcoPot.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panQualityContent.add(lblEcoPot, gridBagConstraints);

        lblChemStat.setText(org.openide.util.NbBundle.getMessage(WkFgPanTwo.class, "WkFgPanTwo.lblChemStat.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panQualityContent.add(lblChemStat, gridBagConstraints);

        lblHydromorph.setText(org.openide.util.NbBundle.getMessage(WkFgPanTwo.class, "WkFgPanTwo.lblHydromorph.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panQualityContent.add(lblHydromorph, gridBagConstraints);

        lblZiel.setText(org.openide.util.NbBundle.getMessage(WkFgPanTwo.class, "WkFgPanTwo.lblZiel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panQualityContent.add(lblZiel, gridBagConstraints);

        lblSchutzgut.setText(org.openide.util.NbBundle.getMessage(WkFgPanTwo.class, "WkFgPanTwo.lblSchutzgut.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panQualityContent.add(lblSchutzgut, gridBagConstraints);

        lblPadWithin.setText(org.openide.util.NbBundle.getMessage(WkFgPanTwo.class, "WkFgPanTwo.lblPadWithin.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panQualityContent.add(lblPadWithin, gridBagConstraints);

        lblPadStat.setText(org.openide.util.NbBundle.getMessage(WkFgPanTwo.class, "WkFgPanTwo.lblPadStat.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panQualityContent.add(lblPadStat, gridBagConstraints);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.ziel}"), txtZiel, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceNullValue(null);
        binding.setSourceUnreadableValue("<Error>");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panQualityContent.add(txtZiel, gridBagConstraints);

        cbEcoStat.setMinimumSize(new java.awt.Dimension(350, 20));
        cbEcoStat.setPreferredSize(new java.awt.Dimension(350, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.eco_stat}"), cbEcoStat, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 5, 5);
        panQualityContent.add(cbEcoStat, gridBagConstraints);

        cbEcoPot.setMinimumSize(new java.awt.Dimension(350, 20));
        cbEcoPot.setPreferredSize(new java.awt.Dimension(350, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.eco_pot}"), cbEcoPot, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panQualityContent.add(cbEcoPot, gridBagConstraints);

        cbChemStat.setMinimumSize(new java.awt.Dimension(350, 20));
        cbChemStat.setPreferredSize(new java.awt.Dimension(350, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.chem_stat}"), cbChemStat, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panQualityContent.add(cbChemStat, gridBagConstraints);

        cbHydromorph.setMinimumSize(new java.awt.Dimension(350, 20));
        cbHydromorph.setPreferredSize(new java.awt.Dimension(350, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.hydromorph}"), cbHydromorph, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panQualityContent.add(cbHydromorph, gridBagConstraints);

        cbSchutzgut.setMinimumSize(new java.awt.Dimension(350, 20));
        cbSchutzgut.setPreferredSize(new java.awt.Dimension(350, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.schutzgut}"), cbSchutzgut, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panQualityContent.add(cbSchutzgut, gridBagConstraints);

        cbPadStat.setMinimumSize(new java.awt.Dimension(350, 20));
        cbPadStat.setPreferredSize(new java.awt.Dimension(350, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.pad_stat}"), cbPadStat, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panQualityContent.add(cbPadStat, gridBagConstraints);

        cbPadWithin.setMinimumSize(new java.awt.Dimension(350, 20));
        cbPadWithin.setPreferredSize(new java.awt.Dimension(350, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.pad_within}"), cbPadWithin, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panQualityContent.add(cbPadWithin, gridBagConstraints);

        lblSpace.setText(org.openide.util.NbBundle.getMessage(WkFgPanTwo.class, "WkFgPanTwo.lblSpace.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weighty = 1.0;
        panQualityContent.add(lblSpace, gridBagConstraints);

        panQuality.add(panQualityContent, java.awt.BorderLayout.CENTER);

        add(panQuality, java.awt.BorderLayout.CENTER);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private de.cismet.cids.editors.DefaultBindableReferenceCombo cbChemStat;
    private de.cismet.cids.editors.DefaultBindableReferenceCombo cbEcoPot;
    private de.cismet.cids.editors.DefaultBindableReferenceCombo cbEcoStat;
    private de.cismet.cids.editors.DefaultBindableReferenceCombo cbHydromorph;
    private de.cismet.cids.editors.DefaultBindableReferenceCombo cbPadStat;
    private de.cismet.cids.editors.DefaultBindableReferenceCombo cbPadWithin;
    private de.cismet.cids.editors.DefaultBindableReferenceCombo cbSchutzgut;
    private javax.swing.JLabel lblChemStat;
    private javax.swing.JLabel lblEcoPot;
    private javax.swing.JLabel lblEcoStat;
    private javax.swing.JLabel lblHeading;
    private javax.swing.JLabel lblHydromorph;
    private javax.swing.JLabel lblPadStat;
    private javax.swing.JLabel lblPadWithin;
    private javax.swing.JLabel lblSchutzgut;
    private javax.swing.JLabel lblSpace;
    private javax.swing.JLabel lblZiel;
    private de.cismet.tools.gui.SemiRoundedPanel panHeadQuality;
    private de.cismet.tools.gui.RoundedPanel panQuality;
    private javax.swing.JPanel panQualityContent;
    private javax.swing.JTextField txtZiel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    @Override
    public CidsBean getCidsBean() {
        return cidsBean;
    }

    @Override
    public void setCidsBean(CidsBean cidsBean) {
        bindingGroup.unbind();
        if (cidsBean != null) {
            this.cidsBean = cidsBean;
            DefaultCustomObjectEditor.setMetaClassInformationToMetaClassStoreComponentsInBindingGroup(bindingGroup, this.cidsBean);
            bindingGroup.bind();
        }
    }

    @Override
    public void dispose() {
        bindingGroup.unbind();
    }
}
