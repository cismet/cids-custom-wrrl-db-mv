/*
 *  Copyright (C) 2010 jruiz
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * WkKgEditor.java
 *
 * Created on 04.10.2010, 10:29:53
 */

package de.cismet.cids.custom.objecteditors.wrrl_db_mv;

import de.cismet.cids.custom.util.TabbedPaneUITransparent;
import de.cismet.cids.dynamics.CidsBean;
import de.cismet.cids.editors.EditorSaveListener;
import de.cismet.cids.tools.metaobjectrenderer.CidsBeanRenderer;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

/**
 *
 * @author jruiz
 */
public class WkGwEditor extends javax.swing.JPanel implements CidsBeanRenderer, EditorSaveListener {

    private CidsBean cidsBean;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    private static final org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(WkGwEditor.class);

    /** Creates new form WkKgEditor */
    public WkGwEditor() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();
        
        initComponents();

        tpMain.setUI(new TabbedPaneUITransparent());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panFooter = new javax.swing.JPanel();
        lblFoot = new javax.swing.JLabel();
        tpMain = new javax.swing.JTabbedPane();
        panAllgemeines = new javax.swing.JPanel();
        lblSpacingBottom = new javax.swing.JLabel();
        wkGwPanOne1 = new de.cismet.cids.custom.objecteditors.wrrl_db_mv.WkGwPanOne();
        panRisikoabschätzung = new javax.swing.JPanel();
        lblSpacingBottom2 = new javax.swing.JLabel();
        wkGwPanFive1 = new de.cismet.cids.custom.objecteditors.wrrl_db_mv.WkGwPanFive();
        wkGwPanTwo1 = new de.cismet.cids.custom.objecteditors.wrrl_db_mv.WkGwPanTwo();
        panQualitaetsinformationen = new javax.swing.JPanel();
        lblSpacingBottom1 = new javax.swing.JLabel();
        wkGwPanThree1 = new de.cismet.cids.custom.objecteditors.wrrl_db_mv.WkGwPanThree();
        wkGwPanFour1 = new de.cismet.cids.custom.objecteditors.wrrl_db_mv.WkGwPanFour();
        panWeitereInformationen = new javax.swing.JPanel();
        lblSpacingBottom3 = new javax.swing.JLabel();
        wkGwPanSix1 = new de.cismet.cids.custom.objecteditors.wrrl_db_mv.WkGwPanSix();

        panFooter.setOpaque(false);
        panFooter.setLayout(new java.awt.GridBagLayout());

        lblFoot.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblFoot.setForeground(new java.awt.Color(255, 255, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(7, 25, 7, 25);
        panFooter.add(lblFoot, gridBagConstraints);

        setLayout(new java.awt.BorderLayout());

        panAllgemeines.setOpaque(false);
        panAllgemeines.setLayout(new java.awt.GridBagLayout());

        lblSpacingBottom.setText(org.openide.util.NbBundle.getMessage(WkGwEditor.class, "WkGwEditor.lblSpacingBottom.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        panAllgemeines.add(lblSpacingBottom, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        panAllgemeines.add(wkGwPanOne1, gridBagConstraints);

        tpMain.addTab(org.openide.util.NbBundle.getMessage(WkGwEditor.class, "WkGwEditor.panAllgemeines.TabConstraints.tabTitle"), panAllgemeines); // NOI18N

        panRisikoabschätzung.setOpaque(false);
        panRisikoabschätzung.setLayout(new java.awt.GridBagLayout());

        lblSpacingBottom2.setText(org.openide.util.NbBundle.getMessage(WkGwEditor.class, "WkGwEditor.lblSpacingBottom2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        panRisikoabschätzung.add(lblSpacingBottom2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        panRisikoabschätzung.add(wkGwPanFive1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        panRisikoabschätzung.add(wkGwPanTwo1, gridBagConstraints);

        tpMain.addTab(org.openide.util.NbBundle.getMessage(WkGwEditor.class, "WkGwEditor.panRisikoabschätzung.TabConstraints.tabTitle"), panRisikoabschätzung); // NOI18N

        panQualitaetsinformationen.setOpaque(false);
        panQualitaetsinformationen.setLayout(new java.awt.GridBagLayout());

        lblSpacingBottom1.setText(org.openide.util.NbBundle.getMessage(WkGwEditor.class, "WkGwEditor.lblSpacingBottom1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        panQualitaetsinformationen.add(lblSpacingBottom1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        panQualitaetsinformationen.add(wkGwPanThree1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        panQualitaetsinformationen.add(wkGwPanFour1, gridBagConstraints);

        tpMain.addTab(org.openide.util.NbBundle.getMessage(WkGwEditor.class, "WkGwEditor.panQualitaetsinformationen.TabConstraints.tabTitle"), panQualitaetsinformationen); // NOI18N

        panWeitereInformationen.setOpaque(false);
        panWeitereInformationen.setLayout(new java.awt.GridBagLayout());

        lblSpacingBottom3.setText(org.openide.util.NbBundle.getMessage(WkGwEditor.class, "WkGwEditor.lblSpacingBottom3.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        panWeitereInformationen.add(lblSpacingBottom3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        panWeitereInformationen.add(wkGwPanSix1, gridBagConstraints);

        tpMain.addTab(org.openide.util.NbBundle.getMessage(WkGwEditor.class, "WkGwEditor.panWeitereInformationen.TabConstraints.tabTitle"), panWeitereInformationen); // NOI18N

        add(tpMain, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public CidsBean getCidsBean() {
        return cidsBean;
    }

    @Override
    public void setCidsBean(final CidsBean cidsBean) {
        bindingGroup.unbind();
        this.cidsBean = cidsBean;
        if (cidsBean != null) {
            wkGwPanOne1.setCidsBean(cidsBean);
            wkGwPanTwo1.setCidsBean(cidsBean);
            wkGwPanThree1.setCidsBean(cidsBean);
            wkGwPanFour1.setCidsBean(cidsBean);
            wkGwPanFive1.setCidsBean(cidsBean);
            wkGwPanSix1.setCidsBean(cidsBean);
            bindingGroup.bind();

            cidsBean.addPropertyChangeListener(new PropertyChangeListener() {
                @Override
                public void propertyChange(PropertyChangeEvent pce) {
                    if (pce.getPropertyName().equals("name")) {
                        try {
                            cidsBean.setProperty("ms_cd_gb", "DEMV_" + (String) pce.getNewValue());
                        } catch (Exception ex) {
                            if (LOG.isDebugEnabled()) {
                                LOG.debug("autosetting ms_cd_gb failed", ex);
                            }
                        }
                    }
                }
            });

            cidsBean.addPropertyChangeListener(new PropertyChangeListener() {
                @Override
                public void propertyChange(PropertyChangeEvent pce) {
                    if (pce.getPropertyName().equals("ms_cd_gb")) {
                        try {
                            cidsBean.setProperty("eu_cd_gb", "DE_GB_" + (String) pce.getNewValue());
                        } catch (Exception ex) {
                            if (LOG.isDebugEnabled()) {
                                LOG.debug("autosetting eu_cd_gb failed", ex);
                            }
                        }
                    }
                }
            });

            cidsBean.addPropertyChangeListener(new PropertyChangeListener() {
                @Override
                public void propertyChange(PropertyChangeEvent pce) {
                    if (
                            pce.getPropertyName().equals("nitrat") ||
                            pce.getPropertyName().equals("pesticides") ||
                            pce.getPropertyName().equals("actsubpest") ||
                            pce.getPropertyName().equals("annex_ii") ||
                            pce.getPropertyName().equals("othpl")) {
                        try {
                            int worstCaseValue = 0;
                            String[] props = {"nitrat", "pesticides", "actsubpest", "annex_ii", "othpl"};
                            int worstCasePropIndex = 0;
                            for (int propIndex = 0; propIndex < props.length; propIndex++) {
                                String prop = props[propIndex];
                                String baseValue = (String) ((CidsBean) cidsBean.getProperty(prop)).getProperty("value");
                                int  propValue = 0;
                                try {
                                    propValue = Integer.valueOf(baseValue);
                                } catch (Exception ex) {
                                    LOG.debug("baseValInt cast", ex);
                                }

                                if (propValue >= worstCaseValue) {
                                    worstCasePropIndex = propIndex;
                                    worstCaseValue = propValue;
                                }
                            }
                            cidsBean.setProperty("chem_stat", (CidsBean) cidsBean.getProperty(props[worstCasePropIndex]));
                        } catch (Exception ex) {
                            if (LOG.isDebugEnabled()) {
                                LOG.debug("autosetting chem_stat failed", ex);
                            }
                        }
                    }
                }
            });
        }
    }

    @Override
    public void dispose() {
        wkGwPanOne1.dispose();
        wkGwPanTwo1.dispose();
        wkGwPanThree1.dispose();
        wkGwPanFour1.dispose();
        wkGwPanFive1.dispose();
        wkGwPanSix1.dispose();
        bindingGroup.unbind();
    }

    @Override
    public String getTitle() {
        return "Wasserkörper "+String.valueOf(cidsBean);
    }

    @Override
    public void setTitle(String title) {
        // NOP
    }

    @Override
    public void editorClosed(EditorSaveStatus status) {
        //TODO ?
    }

    @Override
    public void prepareForSave() {
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblFoot;
    private javax.swing.JLabel lblSpacingBottom;
    private javax.swing.JLabel lblSpacingBottom1;
    private javax.swing.JLabel lblSpacingBottom2;
    private javax.swing.JLabel lblSpacingBottom3;
    private javax.swing.JPanel panAllgemeines;
    private javax.swing.JPanel panFooter;
    private javax.swing.JPanel panQualitaetsinformationen;
    private javax.swing.JPanel panRisikoabschätzung;
    private javax.swing.JPanel panWeitereInformationen;
    private javax.swing.JTabbedPane tpMain;
    private de.cismet.cids.custom.objecteditors.wrrl_db_mv.WkGwPanFive wkGwPanFive1;
    private de.cismet.cids.custom.objecteditors.wrrl_db_mv.WkGwPanFour wkGwPanFour1;
    private de.cismet.cids.custom.objecteditors.wrrl_db_mv.WkGwPanOne wkGwPanOne1;
    private de.cismet.cids.custom.objecteditors.wrrl_db_mv.WkGwPanSix wkGwPanSix1;
    private de.cismet.cids.custom.objecteditors.wrrl_db_mv.WkGwPanThree wkGwPanThree1;
    private de.cismet.cids.custom.objecteditors.wrrl_db_mv.WkGwPanTwo wkGwPanTwo1;
    // End of variables declaration//GEN-END:variables

}
