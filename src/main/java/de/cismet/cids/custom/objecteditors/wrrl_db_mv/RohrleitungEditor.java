/*
 * RohrleitungEditor.java
 *
 * Created on 18.10.2010, 16:24:32
 */
package de.cismet.cids.custom.objecteditors.wrrl_db_mv;

import de.cismet.cids.dynamics.CidsBean;
import de.cismet.cids.dynamics.DisposableCidsBeanStore;
import de.cismet.cids.editors.DefaultCustomObjectEditor;

/**
 *
 * @author stefan
 */
public class RohrleitungEditor extends javax.swing.JPanel implements DisposableCidsBeanStore {

    private CidsBean cidsBean;

    /** Creates new form RohrleitungEditor */
    public RohrleitungEditor() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        panContent = new javax.swing.JPanel();
        txtDescGwName = new javax.swing.JLabel();
        txtDescSQAId = new javax.swing.JLabel();
        txtDescDurchmesser = new javax.swing.JLabel();
        txtDescAbsturz = new javax.swing.JLabel();
        txtDescAbsturzAuslauf = new javax.swing.JLabel();
        txtDescBemerkung = new javax.swing.JLabel();
        txtDescLaenge = new javax.swing.JLabel();
        txtDescOekoDurch = new javax.swing.JLabel();
        txtDescSediment = new javax.swing.JLabel();
        txtStatusQuoAnalyse = new javax.swing.JTextField();
        scpBemerkung = new javax.swing.JScrollPane();
        taBemerkung = new javax.swing.JTextArea();
        spHoeheAuslauf = new javax.swing.JSpinner();
        spLaenge = new javax.swing.JSpinner();
        spDurchmesser = new javax.swing.JSpinner();
        cbSchachtabsturz = new de.cismet.cids.editors.DefaultBindableReferenceCombo();
        cbSediment = new de.cismet.cids.editors.DefaultBindableReferenceCombo();
        cdOekoDurch = new de.cismet.cids.editors.DefaultBindableReferenceCombo();
        lblMassnahmen = new javax.swing.JLabel();
        lblMassnahmenId = new javax.swing.JLabel();
        cbMassnahmen = new de.cismet.cids.editors.DefaultBindableReferenceCombo();
        txtMassnahmenID = new javax.swing.JTextField();
        txtStatusQuoAnalyse1 = new javax.swing.JTextField();

        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        panContent.setOpaque(false);
        panContent.setLayout(new java.awt.GridBagLayout());

        txtDescGwName.setText(org.openide.util.NbBundle.getMessage(RohrleitungEditor.class, "RohrleitungEditor.txtDescGwName.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panContent.add(txtDescGwName, gridBagConstraints);

        txtDescSQAId.setText(org.openide.util.NbBundle.getMessage(RohrleitungEditor.class, "RohrleitungEditor.txtDescSQAId.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panContent.add(txtDescSQAId, gridBagConstraints);

        txtDescDurchmesser.setText(org.openide.util.NbBundle.getMessage(RohrleitungEditor.class, "RohrleitungEditor.txtDescDurchmesser.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panContent.add(txtDescDurchmesser, gridBagConstraints);

        txtDescAbsturz.setText(org.openide.util.NbBundle.getMessage(RohrleitungEditor.class, "RohrleitungEditor.txtDescAbsturz.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panContent.add(txtDescAbsturz, gridBagConstraints);

        txtDescAbsturzAuslauf.setText(org.openide.util.NbBundle.getMessage(RohrleitungEditor.class, "RohrleitungEditor.txtDescAbsturzAuslauf.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panContent.add(txtDescAbsturzAuslauf, gridBagConstraints);

        txtDescBemerkung.setText(org.openide.util.NbBundle.getMessage(RohrleitungEditor.class, "RohrleitungEditor.txtDescBemerkung.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panContent.add(txtDescBemerkung, gridBagConstraints);

        txtDescLaenge.setText(org.openide.util.NbBundle.getMessage(RohrleitungEditor.class, "RohrleitungEditor.txtDescLaenge.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panContent.add(txtDescLaenge, gridBagConstraints);

        txtDescOekoDurch.setText(org.openide.util.NbBundle.getMessage(RohrleitungEditor.class, "RohrleitungEditor.txtDescOekoDurch.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panContent.add(txtDescOekoDurch, gridBagConstraints);

        txtDescSediment.setText(org.openide.util.NbBundle.getMessage(RohrleitungEditor.class, "RohrleitungEditor.txtDescSediment.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panContent.add(txtDescSediment, gridBagConstraints);

        txtStatusQuoAnalyse.setMinimumSize(new java.awt.Dimension(200, 20));
        txtStatusQuoAnalyse.setPreferredSize(new java.awt.Dimension(200, 20));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.sqa_id}"), txtStatusQuoAnalyse, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceNullValue("");
        binding.setSourceUnreadableValue("<Error>");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panContent.add(txtStatusQuoAnalyse, gridBagConstraints);

        scpBemerkung.setMaximumSize(new java.awt.Dimension(200, 75));
        scpBemerkung.setMinimumSize(new java.awt.Dimension(200, 75));
        scpBemerkung.setPreferredSize(new java.awt.Dimension(200, 75));

        taBemerkung.setColumns(20);
        taBemerkung.setFont(new java.awt.Font("Tahoma", 0, 11));
        taBemerkung.setRows(5);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.bemerkung}"), taBemerkung, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceNullValue("");
        binding.setSourceUnreadableValue("<Error>");
        bindingGroup.addBinding(binding);

        scpBemerkung.setViewportView(taBemerkung);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panContent.add(scpBemerkung, gridBagConstraints);

        spHoeheAuslauf.setMaximumSize(new java.awt.Dimension(75, 20));
        spHoeheAuslauf.setMinimumSize(new java.awt.Dimension(75, 20));
        spHoeheAuslauf.setPreferredSize(new java.awt.Dimension(75, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.laenge_m}"), spHoeheAuslauf, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panContent.add(spHoeheAuslauf, gridBagConstraints);

        spLaenge.setMaximumSize(new java.awt.Dimension(75, 20));
        spLaenge.setMinimumSize(new java.awt.Dimension(75, 20));
        spLaenge.setPreferredSize(new java.awt.Dimension(75, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.durchmess}"), spLaenge, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panContent.add(spLaenge, gridBagConstraints);

        spDurchmesser.setMaximumSize(new java.awt.Dimension(75, 20));
        spDurchmesser.setMinimumSize(new java.awt.Dimension(75, 20));
        spDurchmesser.setPreferredSize(new java.awt.Dimension(75, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.abst_r_end}"), spDurchmesser, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panContent.add(spDurchmesser, gridBagConstraints);

        cbSchachtabsturz.setMaximumSize(new java.awt.Dimension(200, 20));
        cbSchachtabsturz.setMinimumSize(new java.awt.Dimension(200, 20));
        cbSchachtabsturz.setPreferredSize(new java.awt.Dimension(200, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.absturz}"), cbSchachtabsturz, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panContent.add(cbSchachtabsturz, gridBagConstraints);

        cbSediment.setMaximumSize(new java.awt.Dimension(200, 20));
        cbSediment.setMinimumSize(new java.awt.Dimension(200, 20));
        cbSediment.setPreferredSize(new java.awt.Dimension(200, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.sediment}"), cbSediment, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panContent.add(cbSediment, gridBagConstraints);

        cdOekoDurch.setMaximumSize(new java.awt.Dimension(200, 20));
        cdOekoDurch.setMinimumSize(new java.awt.Dimension(200, 20));
        cdOekoDurch.setPreferredSize(new java.awt.Dimension(200, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.dgk}"), cdOekoDurch, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panContent.add(cdOekoDurch, gridBagConstraints);

        lblMassnahmen.setText(org.openide.util.NbBundle.getMessage(RohrleitungEditor.class, "RohrleitungEditor.lblMassnahmen.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panContent.add(lblMassnahmen, gridBagConstraints);

        lblMassnahmenId.setText(org.openide.util.NbBundle.getMessage(RohrleitungEditor.class, "RohrleitungEditor.lblMassnahmenId.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panContent.add(lblMassnahmenId, gridBagConstraints);

        cbMassnahmen.setMaximumSize(new java.awt.Dimension(200, 20));
        cbMassnahmen.setMinimumSize(new java.awt.Dimension(200, 20));
        cbMassnahmen.setPreferredSize(new java.awt.Dimension(200, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.massn}"), cbMassnahmen, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panContent.add(cbMassnahmen, gridBagConstraints);

        txtMassnahmenID.setMinimumSize(new java.awt.Dimension(200, 20));
        txtMassnahmenID.setPreferredSize(new java.awt.Dimension(200, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.massn_id}"), txtMassnahmenID, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceNullValue("");
        binding.setSourceUnreadableValue("<Error>");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panContent.add(txtMassnahmenID, gridBagConstraints);

        txtStatusQuoAnalyse1.setMinimumSize(new java.awt.Dimension(200, 20));
        txtStatusQuoAnalyse1.setPreferredSize(new java.awt.Dimension(200, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.gewaessername}"), txtStatusQuoAnalyse1, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceNullValue("");
        binding.setSourceUnreadableValue("<Error>");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panContent.add(txtStatusQuoAnalyse1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(panContent, gridBagConstraints);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private de.cismet.cids.editors.DefaultBindableReferenceCombo cbMassnahmen;
    private de.cismet.cids.editors.DefaultBindableReferenceCombo cbSchachtabsturz;
    private de.cismet.cids.editors.DefaultBindableReferenceCombo cbSediment;
    private de.cismet.cids.editors.DefaultBindableReferenceCombo cdOekoDurch;
    private javax.swing.JLabel lblMassnahmen;
    private javax.swing.JLabel lblMassnahmenId;
    private javax.swing.JPanel panContent;
    private javax.swing.JScrollPane scpBemerkung;
    private javax.swing.JSpinner spDurchmesser;
    private javax.swing.JSpinner spHoeheAuslauf;
    private javax.swing.JSpinner spLaenge;
    private javax.swing.JTextArea taBemerkung;
    private javax.swing.JLabel txtDescAbsturz;
    private javax.swing.JLabel txtDescAbsturzAuslauf;
    private javax.swing.JLabel txtDescBemerkung;
    private javax.swing.JLabel txtDescDurchmesser;
    private javax.swing.JLabel txtDescGwName;
    private javax.swing.JLabel txtDescLaenge;
    private javax.swing.JLabel txtDescOekoDurch;
    private javax.swing.JLabel txtDescSQAId;
    private javax.swing.JLabel txtDescSediment;
    private javax.swing.JTextField txtMassnahmenID;
    private javax.swing.JTextField txtStatusQuoAnalyse;
    private javax.swing.JTextField txtStatusQuoAnalyse1;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    @Override
    public CidsBean getCidsBean() {
        return cidsBean;
    }

    @Override
    public void setCidsBean(CidsBean cidsBean) {
        bindingGroup.unbind();
        if (cidsBean != null) {
            this.cidsBean = cidsBean;
            DefaultCustomObjectEditor.setMetaClassInformationToMetaClassStoreComponentsInBindingGroup(bindingGroup, this.cidsBean);
            bindingGroup.bind();
        }
    }

    @Override
    public void dispose() {
        bindingGroup.unbind();
    }
}
