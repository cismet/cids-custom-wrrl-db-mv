/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 * WkFgPanOne.java
 *
 * Created on 04.08.2010, 13:44:05
 */
package de.cismet.cids.custom.objecteditors.wrrl_db_mv;

import Sirius.server.middleware.types.MetaObject;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseListener;

import java.util.List;

import de.cismet.cids.custom.wrrl_db_mv.util.CidsBeanSupport;

import de.cismet.cids.dynamics.CidsBean;
import de.cismet.cids.dynamics.DisposableCidsBeanStore;

import de.cismet.cids.editors.DefaultCustomObjectEditor;
import de.cismet.cids.editors.EditorClosedEvent;
import de.cismet.cids.editors.EditorSaveListener;
import de.cismet.cids.editors.FieldStateDecider;

/**
 * DOCUMENT ME!
 *
 * @author   stefan
 * @version  $Revision$, $Date$
 */
public class FgskKartierabschnittKartierabschnitt extends javax.swing.JPanel implements DisposableCidsBeanStore,
    EditorSaveListener {

    //~ Instance fields --------------------------------------------------------

    private CidsBean cidsBean;
    private SubTypeDecider decider = new SubTypeDecider();
    private boolean readOnly = false;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cbSeeausfluss;
    private de.cismet.cids.editors.DefaultBindableCheckboxField ccGewaesserSubtyp;
    private de.cismet.tools.gui.RoundedPanel glassPanel;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JScrollPane jScrollPane1;
    private de.cismet.tools.gui.RoundedPanel jpGewTyp;
    private javax.swing.JPanel jpGroesse;
    private javax.swing.JPanel jpUnterh;
    private de.cismet.cids.custom.objecteditors.wrrl_db_mv.KartierabschnittStammEditor kartierabschnittStammEditor1;
    private javax.swing.JLabel lblGewaesserbreite;
    private javax.swing.JLabel lblGewaessertyp;
    private javax.swing.JLabel lblHeading;
    private javax.swing.JLabel lblHeading1;
    private javax.swing.JLabel lblHeading2;
    private javax.swing.JLabel lblSeeausfluss;
    private javax.swing.JLabel lblSonderfall;
    private javax.swing.JLabel lblSpacing;
    private javax.swing.JLabel lblSpacing1;
    private javax.swing.JLabel lblSpacing2;
    private javax.swing.JLabel lblUnterhaltung;
    private javax.swing.JLabel lblWasserfuehrung;
    private javax.swing.JLabel lblfliessrichtung;
    private javax.swing.JLabel lblfliessrichtung1;
    private de.cismet.tools.gui.SemiRoundedPanel panHeadInfo;
    private de.cismet.tools.gui.SemiRoundedPanel panHeadInfo1;
    private de.cismet.tools.gui.SemiRoundedPanel panHeadInfo2;
    private de.cismet.tools.gui.RoundedPanel panInfo;
    private de.cismet.tools.gui.RoundedPanel panInfo1;
    private de.cismet.tools.gui.RoundedPanel panInfo2;
    private javax.swing.JPanel panInfoContent;
    private javax.swing.JPanel panInfoContent1;
    private javax.swing.JPanel panInfoContent2;
    private de.cismet.cids.editors.DefaultBindableRadioButtonField rdSonderfall;
    private de.cismet.cids.editors.DefaultBindableRadioButtonField rdWasserfuehrung;
    private de.cismet.cids.editors.DefaultBindableRadioButtonField referencedRadioButtonField1;
    private de.cismet.cids.editors.DefaultBindableRadioButtonField referencedRadioButtonField2;
    private javax.swing.JSeparator sepMiddle;
    private javax.swing.JSeparator sepMiddle1;
    private javax.swing.JTextArea taErlaeuterung;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form WkFgPanOne.
     */
    public FgskKartierabschnittKartierabschnitt() {
        this(false);
    }

    /**
     * Creates new form WkFgPanOne.
     *
     * @param  readOnly  DOCUMENT ME!
     */
    public FgskKartierabschnittKartierabschnitt(final boolean readOnly) {
        this.readOnly = readOnly;
        initComponents();
        setOpaque(false);
        if (readOnly) {
            setReadOnly(readOnly);
        }
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        glassPanel = new de.cismet.tools.gui.RoundedPanel();
        panInfo = new de.cismet.tools.gui.RoundedPanel();
        kartierabschnittStammEditor1 = new KartierabschnittStammEditor(readOnly);
        jpUnterh = new javax.swing.JPanel();
        panInfo1 = new de.cismet.tools.gui.RoundedPanel();
        panHeadInfo = new de.cismet.tools.gui.SemiRoundedPanel();
        lblHeading = new javax.swing.JLabel();
        panInfoContent = new javax.swing.JPanel();
        lblWasserfuehrung = new javax.swing.JLabel();
        lblUnterhaltung = new javax.swing.JLabel();
        lblSonderfall = new javax.swing.JLabel();
        lblSpacing = new javax.swing.JLabel();
        sepMiddle = new javax.swing.JSeparator();
        lblfliessrichtung = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taErlaeuterung = new javax.swing.JTextArea();
        jCheckBox1 = new javax.swing.JCheckBox();
        rdWasserfuehrung = new de.cismet.cids.editors.DefaultBindableRadioButtonField();
        rdSonderfall = new de.cismet.cids.editors.DefaultBindableRadioButtonField();
        jpGewTyp = new de.cismet.tools.gui.RoundedPanel();
        panHeadInfo1 = new de.cismet.tools.gui.SemiRoundedPanel();
        lblHeading1 = new javax.swing.JLabel();
        panInfoContent1 = new javax.swing.JPanel();
        lblGewaessertyp = new javax.swing.JLabel();
        lblSeeausfluss = new javax.swing.JLabel();
        lblSpacing1 = new javax.swing.JLabel();
        sepMiddle1 = new javax.swing.JSeparator();
        lblfliessrichtung1 = new javax.swing.JLabel();
        cbSeeausfluss = new javax.swing.JCheckBox();
        ccGewaesserSubtyp = new de.cismet.cids.editors.DefaultBindableCheckboxField();
        referencedRadioButtonField1 = new de.cismet.cids.editors.DefaultBindableRadioButtonField();
        jpGroesse = new javax.swing.JPanel();
        panInfo2 = new de.cismet.tools.gui.RoundedPanel();
        panHeadInfo2 = new de.cismet.tools.gui.SemiRoundedPanel();
        lblHeading2 = new javax.swing.JLabel();
        panInfoContent2 = new javax.swing.JPanel();
        lblGewaesserbreite = new javax.swing.JLabel();
        lblSpacing2 = new javax.swing.JLabel();
        referencedRadioButtonField2 = new de.cismet.cids.editors.DefaultBindableRadioButtonField();

        setMaximumSize(new java.awt.Dimension(1100, 650));
        setMinimumSize(new java.awt.Dimension(1100, 650));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(1100, 650));
        setLayout(new java.awt.GridBagLayout());

        glassPanel.setAlpha(0);
        glassPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(glassPanel, gridBagConstraints);

        panInfo.setLayout(new java.awt.GridBagLayout());

        kartierabschnittStammEditor1.setMinimumSize(new java.awt.Dimension(1100, 230));
        kartierabschnittStammEditor1.setPreferredSize(new java.awt.Dimension(1100, 230));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        panInfo.add(kartierabschnittStammEditor1, gridBagConstraints);

        jpUnterh.setMinimumSize(new java.awt.Dimension(745, 160));
        jpUnterh.setOpaque(false);
        jpUnterh.setPreferredSize(new java.awt.Dimension(745, 160));
        jpUnterh.setLayout(new java.awt.BorderLayout());

        panHeadInfo.setBackground(new java.awt.Color(51, 51, 51));
        panHeadInfo.setMinimumSize(new java.awt.Dimension(109, 24));
        panHeadInfo.setPreferredSize(new java.awt.Dimension(109, 24));
        panHeadInfo.setLayout(new java.awt.FlowLayout());

        lblHeading.setForeground(new java.awt.Color(255, 255, 255));
        lblHeading.setText(org.openide.util.NbBundle.getMessage(
                FgskKartierabschnittKartierabschnitt.class,
                "FgskKartierabschnittKartierabschnitt.lblHeading.text")); // NOI18N
        panHeadInfo.add(lblHeading);

        panInfo1.add(panHeadInfo, java.awt.BorderLayout.NORTH);

        panInfoContent.setMinimumSize(new java.awt.Dimension(1057, 250));
        panInfoContent.setOpaque(false);
        panInfoContent.setLayout(new java.awt.GridBagLayout());

        lblWasserfuehrung.setText(org.openide.util.NbBundle.getMessage(
                FgskKartierabschnittKartierabschnitt.class,
                "FgskKartierabschnittKartierabschnitt.lblWasserfuehrung.text")); // NOI18N
        lblWasserfuehrung.setMaximumSize(new java.awt.Dimension(120, 17));
        lblWasserfuehrung.setMinimumSize(new java.awt.Dimension(120, 17));
        lblWasserfuehrung.setPreferredSize(new java.awt.Dimension(120, 17));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 10, 5, 5);
        panInfoContent.add(lblWasserfuehrung, gridBagConstraints);

        lblUnterhaltung.setText(org.openide.util.NbBundle.getMessage(
                FgskKartierabschnittKartierabschnitt.class,
                "FgskKartierabschnittKartierabschnitt.lblUnterhaltung.text")); // NOI18N
        lblUnterhaltung.setMinimumSize(new java.awt.Dimension(120, 17));
        lblUnterhaltung.setPreferredSize(new java.awt.Dimension(120, 17));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        panInfoContent.add(lblUnterhaltung, gridBagConstraints);

        lblSonderfall.setText(org.openide.util.NbBundle.getMessage(
                FgskKartierabschnittKartierabschnitt.class,
                "FgskKartierabschnittKartierabschnitt.lblSonderfall.text")); // NOI18N
        lblSonderfall.setMinimumSize(new java.awt.Dimension(120, 17));
        lblSonderfall.setPreferredSize(new java.awt.Dimension(120, 17));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        panInfoContent.add(lblSonderfall, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.weighty = 1.0;
        panInfoContent.add(lblSpacing, gridBagConstraints);

        sepMiddle.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 5, 15);
        panInfoContent.add(sepMiddle, gridBagConstraints);

        lblfliessrichtung.setText(org.openide.util.NbBundle.getMessage(
                FgskKartierabschnittKartierabschnitt.class,
                "FgskKartierabschnittKartierabschnitt.lblfliessrichtung.text")); // NOI18N
        lblfliessrichtung.setMinimumSize(new java.awt.Dimension(120, 17));
        lblfliessrichtung.setPreferredSize(new java.awt.Dimension(120, 17));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 5, 5);
        panInfoContent.add(lblfliessrichtung, gridBagConstraints);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(230, 90));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(230, 90));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.erlaeuterung}"),
                taErlaeuterung,
                org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jScrollPane1.setViewportView(taErlaeuterung);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 5, 10);
        panInfoContent.add(jScrollPane1, gridBagConstraints);

        jCheckBox1.setContentAreaFilled(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.unterhaltungerkennbar}"),
                jCheckBox1,
                org.jdesktop.beansbinding.BeanProperty.create("selected"));
        binding.setSourceNullValue(false);
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panInfoContent.add(jCheckBox1, gridBagConstraints);

        rdWasserfuehrung.setMinimumSize(new java.awt.Dimension(170, 40));
        rdWasserfuehrung.setOpaque(false);
        rdWasserfuehrung.setPreferredSize(new java.awt.Dimension(170, 40));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.wasserfuehrung_id}"),
                rdWasserfuehrung,
                org.jdesktop.beansbinding.BeanProperty.create("selectedElements"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 5, 10);
        panInfoContent.add(rdWasserfuehrung, gridBagConstraints);

        rdSonderfall.setMinimumSize(new java.awt.Dimension(170, 40));
        rdSonderfall.setOpaque(false);
        rdSonderfall.setPreferredSize(new java.awt.Dimension(170, 40));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.sonderfall_id}"),
                rdSonderfall,
                org.jdesktop.beansbinding.BeanProperty.create("selectedElements"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        panInfoContent.add(rdSonderfall, gridBagConstraints);

        panInfo1.add(panInfoContent, java.awt.BorderLayout.CENTER);

        jpUnterh.add(panInfo1, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        panInfo.add(jpUnterh, gridBagConstraints);

        jpGewTyp.setMinimumSize(new java.awt.Dimension(1100, 200));
        jpGewTyp.setPreferredSize(new java.awt.Dimension(1100, 200));

        panHeadInfo1.setBackground(new java.awt.Color(51, 51, 51));
        panHeadInfo1.setMinimumSize(new java.awt.Dimension(109, 24));
        panHeadInfo1.setPreferredSize(new java.awt.Dimension(109, 24));
        panHeadInfo1.setLayout(new java.awt.FlowLayout());

        lblHeading1.setForeground(new java.awt.Color(255, 255, 255));
        lblHeading1.setText(org.openide.util.NbBundle.getMessage(
                FgskKartierabschnittKartierabschnitt.class,
                "FgskKartierabschnittKartierabschnitt.lblHeading1.text")); // NOI18N
        panHeadInfo1.add(lblHeading1);

        jpGewTyp.add(panHeadInfo1, java.awt.BorderLayout.NORTH);

        panInfoContent1.setMinimumSize(new java.awt.Dimension(1057, 250));
        panInfoContent1.setOpaque(false);
        panInfoContent1.setLayout(new java.awt.GridBagLayout());

        lblGewaessertyp.setText(org.openide.util.NbBundle.getMessage(
                FgskKartierabschnittKartierabschnitt.class,
                "FgskKartierabschnittKartierabschnitt.lblGewaessertyp.text")); // NOI18N
        lblGewaessertyp.setMaximumSize(new java.awt.Dimension(120, 17));
        lblGewaessertyp.setMinimumSize(new java.awt.Dimension(130, 17));
        lblGewaessertyp.setPreferredSize(new java.awt.Dimension(130, 17));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 10, 5, 5);
        panInfoContent1.add(lblGewaessertyp, gridBagConstraints);

        lblSeeausfluss.setText(org.openide.util.NbBundle.getMessage(
                FgskKartierabschnittKartierabschnitt.class,
                "FgskKartierabschnittKartierabschnitt.lblSeeausfluss.text")); // NOI18N
        lblSeeausfluss.setMinimumSize(new java.awt.Dimension(130, 17));
        lblSeeausfluss.setPreferredSize(new java.awt.Dimension(130, 17));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        panInfoContent1.add(lblSeeausfluss, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.weighty = 1.0;
        panInfoContent1.add(lblSpacing1, gridBagConstraints);

        sepMiddle1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(15, 15, 5, 25);
        panInfoContent1.add(sepMiddle1, gridBagConstraints);

        lblfliessrichtung1.setText(org.openide.util.NbBundle.getMessage(
                FgskKartierabschnittKartierabschnitt.class,
                "FgskKartierabschnittKartierabschnitt.lblfliessrichtung1.text")); // NOI18N
        lblfliessrichtung1.setMinimumSize(new java.awt.Dimension(130, 17));
        lblfliessrichtung1.setPreferredSize(new java.awt.Dimension(130, 17));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 5, 5);
        panInfoContent1.add(lblfliessrichtung1, gridBagConstraints);

        cbSeeausfluss.setContentAreaFilled(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.seeausfluss}"),
                cbSeeausfluss,
                org.jdesktop.beansbinding.BeanProperty.create("selected"));
        binding.setSourceNullValue(false);
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        panInfoContent1.add(cbSeeausfluss, gridBagConstraints);

        ccGewaesserSubtyp.setMinimumSize(new java.awt.Dimension(270, 120));
        ccGewaesserSubtyp.setOpaque(false);
        ccGewaesserSubtyp.setPreferredSize(new java.awt.Dimension(270, 120));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.gewaessersubtyp}"),
                ccGewaesserSubtyp,
                org.jdesktop.beansbinding.BeanProperty.create("selectedElements"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 5, 10);
        panInfoContent1.add(ccGewaesserSubtyp, gridBagConstraints);

        referencedRadioButtonField1.setMinimumSize(new java.awt.Dimension(400, 120));
        referencedRadioButtonField1.setOpaque(false);
        referencedRadioButtonField1.setPreferredSize(new java.awt.Dimension(400, 120));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.gewaessertyp_id}"),
                referencedRadioButtonField1,
                org.jdesktop.beansbinding.BeanProperty.create("selectedElements"));
        bindingGroup.addBinding(binding);

        referencedRadioButtonField1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {

                @Override
                public void propertyChange(final java.beans.PropertyChangeEvent evt) {
                    referencedRadioButtonField1PropertyChange(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 5, 10);
        panInfoContent1.add(referencedRadioButtonField1, gridBagConstraints);

        jpGewTyp.add(panInfoContent1, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        panInfo.add(jpGewTyp, gridBagConstraints);

        jpGroesse.setMinimumSize(new java.awt.Dimension(335, 160));
        jpGroesse.setOpaque(false);
        jpGroesse.setPreferredSize(new java.awt.Dimension(335, 160));
        jpGroesse.setLayout(new java.awt.BorderLayout());

        panHeadInfo2.setBackground(new java.awt.Color(51, 51, 51));
        panHeadInfo2.setMinimumSize(new java.awt.Dimension(109, 24));
        panHeadInfo2.setPreferredSize(new java.awt.Dimension(109, 24));
        panHeadInfo2.setLayout(new java.awt.FlowLayout());

        lblHeading2.setForeground(new java.awt.Color(255, 255, 255));
        lblHeading2.setText(org.openide.util.NbBundle.getMessage(
                FgskKartierabschnittKartierabschnitt.class,
                "FgskKartierabschnittKartierabschnitt.lblHeading2.text")); // NOI18N
        panHeadInfo2.add(lblHeading2);

        panInfo2.add(panHeadInfo2, java.awt.BorderLayout.NORTH);

        panInfoContent2.setMinimumSize(new java.awt.Dimension(1057, 250));
        panInfoContent2.setOpaque(false);
        panInfoContent2.setLayout(new java.awt.GridBagLayout());

        lblGewaesserbreite.setText(org.openide.util.NbBundle.getMessage(
                FgskKartierabschnittKartierabschnitt.class,
                "FgskKartierabschnittKartierabschnitt.lblGewaesserbreite.text")); // NOI18N
        lblGewaesserbreite.setMaximumSize(new java.awt.Dimension(120, 17));
        lblGewaesserbreite.setMinimumSize(new java.awt.Dimension(120, 17));
        lblGewaesserbreite.setPreferredSize(new java.awt.Dimension(120, 17));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 10, 5, 5);
        panInfoContent2.add(lblGewaesserbreite, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.weighty = 1.0;
        panInfoContent2.add(lblSpacing2, gridBagConstraints);

        referencedRadioButtonField2.setMinimumSize(new java.awt.Dimension(150, 100));
        referencedRadioButtonField2.setOpaque(false);
        referencedRadioButtonField2.setPreferredSize(new java.awt.Dimension(150, 100));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.gewaesserbreite_id}"),
                referencedRadioButtonField2,
                org.jdesktop.beansbinding.BeanProperty.create("selectedElements"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 5, 10);
        panInfoContent2.add(referencedRadioButtonField2, gridBagConstraints);

        panInfo2.add(panInfoContent2, java.awt.BorderLayout.CENTER);

        jpGroesse.add(panInfo2, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 0);
        panInfo.add(jpGroesse, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(panInfo, gridBagConstraints);

        bindingGroup.bind();
    } // </editor-fold>//GEN-END:initComponents

    /**
     * Colo DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void referencedRadioButtonField1PropertyChange(final java.beans.PropertyChangeEvent evt) { //GEN-FIRST:event_referencedRadioButtonField1PropertyChange
        if ((evt.getPropertyName().equals("selectedElements"))) {
            final CidsBean newValue = (CidsBean)evt.getNewValue();
            decider.setType(newValue);
            ccGewaesserSubtyp.refreshCheckboxState(decider, true);
        }
    }                                                                                                  //GEN-LAST:event_referencedRadioButtonField1PropertyChange

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    @Override
    public CidsBean getCidsBean() {
        return cidsBean;
    }

    @Override
    public void setCidsBean(final CidsBean cidsBean) {
        bindingGroup.unbind();
        if (cidsBean != null) {
            this.cidsBean = cidsBean;
            DefaultCustomObjectEditor.setMetaClassInformationToMetaClassStoreComponentsInBindingGroup(
                bindingGroup,
                this.cidsBean);
            bindingGroup.bind();
            kartierabschnittStammEditor1.setCidsBean(cidsBean);
            decider.setType((CidsBean)cidsBean.getProperty("gewaessertyp_id"));
            ccGewaesserSubtyp.refreshCheckboxState(decider, false);
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @param  readOnly  DOCUMENT ME!
     */
    public void setReadOnly(final boolean readOnly) {
        if (readOnly) {
            glassPanel.addMouseListener(new MouseAdapter() {
                });
        } else {
            for (final MouseListener ml : glassPanel.getMouseListeners()) {
                glassPanel.removeMouseListener(ml);
            }
        }

        this.readOnly = readOnly;
    }

    @Override
    public void dispose() {
        bindingGroup.unbind();
        kartierabschnittStammEditor1.dispose();
        rdSonderfall.dispose();
        rdWasserfuehrung.dispose();
        ccGewaesserSubtyp.dispose();
        referencedRadioButtonField1.dispose();
        referencedRadioButtonField2.dispose();
    }

    @Override
    public void editorClosed(final EditorClosedEvent event) {
        kartierabschnittStammEditor1.editorClosed(event);
    }

    @Override
    public boolean prepareForSave() {
        return kartierabschnittStammEditor1.prepareForSave();
    }

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private class SubTypeDecider implements FieldStateDecider {

        //~ Instance fields ----------------------------------------------------

        List<CidsBean> supportedSubTypes;

        //~ Constructors -------------------------------------------------------

        /**
         * Creates a new SubTypeDecider object.
         */
        public SubTypeDecider() {
        }

        /**
         * Creates a new SubTypeDecider object.
         *
         * @param  type  DOCUMENT ME!
         */
        public SubTypeDecider(final CidsBean type) {
            supportedSubTypes = CidsBeanSupport.getBeanCollectionFromProperty(type, "gewaessersubtyp");
        }

        //~ Methods ------------------------------------------------------------

        @Override
        public boolean isCheckboxForClassActive(final MetaObject mo) {
            if (supportedSubTypes == null) {
                return false;
            } else {
                return supportedSubTypes.contains(mo.getBean());
            }
        }

        /**
         * DOCUMENT ME!
         *
         * @param  type  the typ to set
         */
        public void setType(final CidsBean type) {
            supportedSubTypes = CidsBeanSupport.getBeanCollectionFromProperty(type, "gewaessersubtyp");
        }
    }
}
