/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 * GupMassnahmeSohle.java
 *
 * Created on 04.04.2012, 11:49:19
 */
package de.cismet.cids.custom.objecteditors.wrrl_db_mv;

import de.cismet.cids.client.tools.DevelopmentTools;

import de.cismet.cids.custom.wrrl_db_mv.util.RendererTools;
import de.cismet.cids.custom.wrrl_db_mv.util.ScrollableComboBox;

import de.cismet.cids.dynamics.CidsBean;

import de.cismet.cids.editors.DefaultCustomObjectEditor;
import de.cismet.cids.editors.EditorClosedEvent;
import de.cismet.cids.editors.EditorSaveListener;

import de.cismet.cids.tools.metaobjectrenderer.CidsBeanRenderer;

/**
 * DOCUMENT ME!
 *
 * @author   therter
 * @version  $Revision$, $Date$
 */
public class GupMassnahmenartEditor extends javax.swing.JPanel implements CidsBeanRenderer, EditorSaveListener {

    //~ Static fields/initializers ---------------------------------------------

    private static final org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(
            GupMassnahmenartEditor.class);

    //~ Instance fields --------------------------------------------------------

    private CidsBean cidsBean;
    private boolean readOnly = false;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cbBoeschungslaenge;
    private javax.swing.JCheckBox cbBoeschungsneigung;
    private javax.swing.JCheckBox cbDeichkronenbreite;
    private de.cismet.cids.editors.DefaultBindableReferenceCombo cbKompartiment;
    private javax.swing.JCheckBox cbRandstreifenbreite;
    private javax.swing.JCheckBox cbSohlbreite;
    private javax.swing.JCheckBox cbVorlandbreite;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jsLeistungstext;
    private javax.swing.JTextArea jtLeistungstext;
    private javax.swing.JLabel lblBeschreibung;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblKompartiment;
    private javax.swing.JLabel lblLeistungstext;
    private javax.swing.JLabel lblOptionaleFelder;
    private javax.swing.JTextField txtBeschreibung;
    private javax.swing.JTextField txtId;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form GupMassnahmeSohle.
     */
    public GupMassnahmenartEditor() {
        this(false);
    }

    /**
     * Creates new form GupMassnahmeSohle.
     *
     * @param  readOnly  DOCUMENT ME!
     */
    public GupMassnahmenartEditor(final boolean readOnly) {
        this.readOnly = readOnly;
        initComponents();

        if (readOnly) {
            RendererTools.makeReadOnly(jtLeistungstext);
            RendererTools.makeReadOnly(txtBeschreibung);
            RendererTools.makeReadOnly(txtId);
            RendererTools.makeReadOnly(cbBoeschungslaenge);
            RendererTools.makeReadOnly(cbBoeschungsneigung);
            RendererTools.makeReadOnly(cbDeichkronenbreite);
            RendererTools.makeReadOnly(cbRandstreifenbreite);
            RendererTools.makeReadOnly(cbSohlbreite);
            RendererTools.makeReadOnly(cbVorlandbreite);
            RendererTools.makeReadOnly(cbKompartiment);
        }
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        lblId = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        lblBeschreibung = new javax.swing.JLabel();
        txtBeschreibung = new javax.swing.JTextField();
        lblLeistungstext = new javax.swing.JLabel();
        jsLeistungstext = new javax.swing.JScrollPane();
        jtLeistungstext = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        cbRandstreifenbreite = new javax.swing.JCheckBox();
        cbBoeschungslaenge = new javax.swing.JCheckBox();
        cbBoeschungsneigung = new javax.swing.JCheckBox();
        cbSohlbreite = new javax.swing.JCheckBox();
        cbDeichkronenbreite = new javax.swing.JCheckBox();
        cbVorlandbreite = new javax.swing.JCheckBox();
        lblOptionaleFelder = new javax.swing.JLabel();
        lblKompartiment = new javax.swing.JLabel();
        cbKompartiment = new ScrollableComboBox();

        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(994, 400));
        setLayout(new java.awt.GridBagLayout());

        lblId.setText(org.openide.util.NbBundle.getMessage(
                GupMassnahmenartEditor.class,
                "GupMassnahmenartEditor.lblId.text")); // NOI18N
        lblId.setMaximumSize(new java.awt.Dimension(170, 17));
        lblId.setMinimumSize(new java.awt.Dimension(170, 17));
        lblId.setPreferredSize(new java.awt.Dimension(215, 17));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 15, 5, 5);
        add(lblId, gridBagConstraints);

        txtId.setMinimumSize(new java.awt.Dimension(400, 25));
        txtId.setPreferredSize(new java.awt.Dimension(450, 25));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.massnahmen_id}"),
                txtId,
                org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 5, 5, 5);
        add(txtId, gridBagConstraints);

        lblBeschreibung.setText(org.openide.util.NbBundle.getMessage(
                GupMassnahmenartEditor.class,
                "GupMassnahmenartEditor.lblBeschreibung.text")); // NOI18N
        lblBeschreibung.setMaximumSize(new java.awt.Dimension(170, 17));
        lblBeschreibung.setMinimumSize(new java.awt.Dimension(170, 17));
        lblBeschreibung.setPreferredSize(new java.awt.Dimension(215, 17));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        add(lblBeschreibung, gridBagConstraints);

        txtBeschreibung.setMinimumSize(new java.awt.Dimension(300, 25));
        txtBeschreibung.setPreferredSize(new java.awt.Dimension(300, 25));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.name}"),
                txtBeschreibung,
                org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(txtBeschreibung, gridBagConstraints);

        lblLeistungstext.setText(org.openide.util.NbBundle.getMessage(
                GupMassnahmenartEditor.class,
                "GupMassnahmenartEditor.lblLeistungstext.text")); // NOI18N
        lblLeistungstext.setMaximumSize(new java.awt.Dimension(170, 17));
        lblLeistungstext.setMinimumSize(new java.awt.Dimension(170, 17));
        lblLeistungstext.setPreferredSize(new java.awt.Dimension(215, 17));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        add(lblLeistungstext, gridBagConstraints);

        jsLeistungstext.setMaximumSize(new java.awt.Dimension(327, 320));

        jtLeistungstext.setColumns(20);
        jtLeistungstext.setRows(5);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.leistungstext}"),
                jtLeistungstext,
                org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jsLeistungstext.setViewportView(jtLeistungstext);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jsLeistungstext, gridBagConstraints);

        jPanel1.setOpaque(false);
        jPanel1.setLayout(new java.awt.GridBagLayout());

        cbRandstreifenbreite.setText(org.openide.util.NbBundle.getMessage(
                GupMassnahmenartEditor.class,
                "GupMassnahmenartEditor.cbRandstreifenbreite.text")); // NOI18N
        cbRandstreifenbreite.setContentAreaFilled(false);
        cbRandstreifenbreite.setPreferredSize(new java.awt.Dimension(223, 22));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.randstreifenbreite}"),
                cbRandstreifenbreite,
                org.jdesktop.beansbinding.BeanProperty.create("selected"));
        binding.setSourceNullValue(false);
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        jPanel1.add(cbRandstreifenbreite, gridBagConstraints);

        cbBoeschungslaenge.setText(org.openide.util.NbBundle.getMessage(
                GupMassnahmenartEditor.class,
                "GupMassnahmenartEditor.cbBoeschungslaenge.text")); // NOI18N
        cbBoeschungslaenge.setContentAreaFilled(false);
        cbBoeschungslaenge.setPreferredSize(new java.awt.Dimension(223, 22));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.boeschungslaenge}"),
                cbBoeschungslaenge,
                org.jdesktop.beansbinding.BeanProperty.create("selected"));
        binding.setSourceNullValue(false);
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        jPanel1.add(cbBoeschungslaenge, gridBagConstraints);

        cbBoeschungsneigung.setText(org.openide.util.NbBundle.getMessage(
                GupMassnahmenartEditor.class,
                "GupMassnahmenartEditor.cbBoeschungsneigung.text")); // NOI18N
        cbBoeschungsneigung.setContentAreaFilled(false);
        cbBoeschungsneigung.setPreferredSize(new java.awt.Dimension(223, 22));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.boeschungsneigung}"),
                cbBoeschungsneigung,
                org.jdesktop.beansbinding.BeanProperty.create("selected"));
        binding.setSourceNullValue(false);
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        jPanel1.add(cbBoeschungsneigung, gridBagConstraints);

        cbSohlbreite.setText(org.openide.util.NbBundle.getMessage(
                GupMassnahmenartEditor.class,
                "GupMassnahmenartEditor.cbSohlbreite.text")); // NOI18N
        cbSohlbreite.setContentAreaFilled(false);
        cbSohlbreite.setPreferredSize(new java.awt.Dimension(223, 22));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.sohlbreite}"),
                cbSohlbreite,
                org.jdesktop.beansbinding.BeanProperty.create("selected"));
        binding.setSourceNullValue(false);
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        jPanel1.add(cbSohlbreite, gridBagConstraints);

        cbDeichkronenbreite.setText(org.openide.util.NbBundle.getMessage(
                GupMassnahmenartEditor.class,
                "GupMassnahmenartEditor.cbDeichkronenbreite.text")); // NOI18N
        cbDeichkronenbreite.setContentAreaFilled(false);
        cbDeichkronenbreite.setPreferredSize(new java.awt.Dimension(223, 22));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.deichkronenbreite}"),
                cbDeichkronenbreite,
                org.jdesktop.beansbinding.BeanProperty.create("selected"));
        binding.setSourceNullValue(false);
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        jPanel1.add(cbDeichkronenbreite, gridBagConstraints);

        cbVorlandbreite.setText(org.openide.util.NbBundle.getMessage(
                GupMassnahmenartEditor.class,
                "GupMassnahmenartEditor.cbVorlandbreite.text")); // NOI18N
        cbVorlandbreite.setContentAreaFilled(false);
        cbVorlandbreite.setPreferredSize(new java.awt.Dimension(223, 22));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.vorlandbreite}"),
                cbVorlandbreite,
                org.jdesktop.beansbinding.BeanProperty.create("selected"));
        binding.setSourceNullValue(false);
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        jPanel1.add(cbVorlandbreite, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 0);
        add(jPanel1, gridBagConstraints);

        lblOptionaleFelder.setText(org.openide.util.NbBundle.getMessage(
                GupMassnahmenartEditor.class,
                "GupMassnahmenartEditor.lblOptionaleFelder.text")); // NOI18N
        lblOptionaleFelder.setMaximumSize(new java.awt.Dimension(170, 17));
        lblOptionaleFelder.setMinimumSize(new java.awt.Dimension(170, 17));
        lblOptionaleFelder.setPreferredSize(new java.awt.Dimension(215, 17));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        add(lblOptionaleFelder, gridBagConstraints);

        lblKompartiment.setText(org.openide.util.NbBundle.getMessage(
                GupMassnahmenartEditor.class,
                "GupMassnahmenartEditor.lblKompartiment.text")); // NOI18N
        lblKompartiment.setMaximumSize(new java.awt.Dimension(170, 17));
        lblKompartiment.setMinimumSize(new java.awt.Dimension(170, 17));
        lblKompartiment.setPreferredSize(new java.awt.Dimension(215, 17));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        add(lblKompartiment, gridBagConstraints);

        cbKompartiment.setMaximumSize(new java.awt.Dimension(290, 20));
        cbKompartiment.setMinimumSize(new java.awt.Dimension(290, 20));
        cbKompartiment.setPreferredSize(new java.awt.Dimension(200, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.kompartiment}"),
                cbKompartiment,
                org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(cbKompartiment, gridBagConstraints);

        bindingGroup.bind();
    } // </editor-fold>//GEN-END:initComponents

    @Override
    public CidsBean getCidsBean() {
        return this.cidsBean;
    }

    @Override
    public void setCidsBean(final CidsBean cidsBean) {
        bindingGroup.unbind();
        this.cidsBean = cidsBean;

        if (cidsBean != null) {
            DefaultCustomObjectEditor.setMetaClassInformationToMetaClassStoreComponentsInBindingGroup(
                bindingGroup,
                cidsBean);
            bindingGroup.bind();
        }
    }

    @Override
    public void dispose() {
        bindingGroup.unbind();
    }

    @Override
    public String getTitle() {
        return "Maßnahmenart: " + ((cidsBean.getProperty("name") != null) ? cidsBean.toString() : "");
    }

    @Override
    public void setTitle(final String title) {
    }

    @Override
    public void editorClosed(final EditorClosedEvent event) {
    }

    @Override
    public boolean prepareForSave() {
        return true;
    }
    /**
     * DOCUMENT ME!
     *
     * @param   args  DOCUMENT ME!
     *
     * @throws  Exception  DOCUMENT ME!
     */
    public static void main(final String[] args) throws Exception {
        DevelopmentTools.createEditorInFrameFromRMIConnectionOnLocalhost(
            "WRRL_DB_MV",
            "Administratoren",
            "admin",
            "x",
            "gup_massnahmenart",
            11,
            1280,
            1024);
    }
}
