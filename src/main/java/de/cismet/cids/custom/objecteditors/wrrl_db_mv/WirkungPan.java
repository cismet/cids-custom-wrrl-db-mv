/*
 * WkFgPanOne.java
 *
 * Created on 04.08.2010, 13:44:05
 */
package de.cismet.cids.custom.objecteditors.wrrl_db_mv;

import de.cismet.cids.custom.util.UIUtil;
import de.cismet.cids.dynamics.CidsBean;
import de.cismet.cids.dynamics.DisposableCidsBeanStore;
import de.cismet.cids.navigator.utils.CidsBeanDropListener;
import de.cismet.cids.navigator.utils.CidsBeanDropTarget;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;

/**
 *
 * @author therter
 */
public class WirkungPan extends javax.swing.JPanel implements DisposableCidsBeanStore, CidsBeanDropListener {
    private static final org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(WirkungPan.class);
    private static final String[] WB_PROPERTIES = {"wirkung_wk_fg", "wirkung_wk_sg", "wirkung_wk_kg", "wirkung_wk_gw"};
    private WbModel wbListModel = new WbModel();
    private CidsBean cidsBean;


    /** Creates new form WkFgPanOne */
    public WirkungPan() {
        initComponents();
        lstWirkung.setModel(wbListModel);
        try {
            new CidsBeanDropTarget(this);
        } catch (Exception ex) {
            LOG.debug("error while creating CidsBeanDropTarget", ex);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panInfo = new de.cismet.tools.gui.RoundedPanel();
        panHeadInfo = new de.cismet.tools.gui.SemiRoundedPanel();
        jLabel1 = new javax.swing.JLabel();
        panInfoContent = new javax.swing.JPanel();
        panwirk = new javax.swing.JPanel();
        btnRemWirkung = new javax.swing.JButton();
        scpWirkung = new javax.swing.JScrollPane();
        lstWirkung = new javax.swing.JList();

        setMinimumSize(new java.awt.Dimension(995, 175));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(995, 175));
        setLayout(new java.awt.BorderLayout());

        panHeadInfo.setBackground(new java.awt.Color(51, 51, 51));
        panHeadInfo.setMinimumSize(new java.awt.Dimension(109, 24));
        panHeadInfo.setPreferredSize(new java.awt.Dimension(109, 24));
        panHeadInfo.setLayout(new java.awt.FlowLayout());

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Wirkung");
        panHeadInfo.add(jLabel1);

        panInfo.add(panHeadInfo, java.awt.BorderLayout.NORTH);

        panInfoContent.setOpaque(false);
        panInfoContent.setLayout(new java.awt.GridBagLayout());

        panwirk.setOpaque(false);
        panwirk.setLayout(new java.awt.GridBagLayout());

        btnRemWirkung.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cismet/cids/custom/objecteditors/wrrl_db_mv/edit_remove_mini.png"))); // NOI18N
        btnRemWirkung.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemWirkungActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        panwirk.add(btnRemWirkung, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        panInfoContent.add(panwirk, gridBagConstraints);

        scpWirkung.setMinimumSize(new java.awt.Dimension(300, 60));
        scpWirkung.setPreferredSize(new java.awt.Dimension(300, 60));

        lstWirkung.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scpWirkung.setViewportView(lstWirkung);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 20);
        panInfoContent.add(scpWirkung, gridBagConstraints);

        panInfo.add(panInfoContent, java.awt.BorderLayout.CENTER);

        add(panInfo, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnRemWirkungActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemWirkungActionPerformed
        final Object selection = lstWirkung.getSelectedValue();
        if (selection != null) {
            final int answer = JOptionPane.showConfirmDialog(this, "Soll die Wirkung auf den Wasserkörper '" + selection.toString() + "' wirklich gelöscht werden?", "Wirkung entfernen", JOptionPane.YES_NO_OPTION);
            if (answer == JOptionPane.YES_OPTION) {
                try {
                    final WbModel.WB_Wrapper objectToRemove = (WbModel.WB_Wrapper) selection;
                    final CidsBean bean = objectToRemove.getWrappedBean();

                    if (bean.getClass().getName().equals("de.cismet.cids.dynamics.Wk_fg")) {
                        removeBean(WB_PROPERTIES[0], bean);
                    } else if (bean.getClass().getName().equals("de.cismet.cids.dynamics.Wk_sg")) {
                        removeBean(WB_PROPERTIES[1], bean);
                    } else if (bean.getClass().getName().equals("de.cismet.cids.dynamics.Wk_kg")) {
                        removeBean(WB_PROPERTIES[2], bean);
                    } else if (bean.getClass().getName().equals("de.cismet.cids.dynamics.Wk_gw")) {
                        removeBean(WB_PROPERTIES[3], bean);
                    }
                    wbListModel.removeElement(objectToRemove);
                } catch (Exception e) {
                    UIUtil.showExceptionToUser(e, this);
                }
            }
        }
}//GEN-LAST:event_btnRemWirkungActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRemWirkung;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList lstWirkung;
    private de.cismet.tools.gui.SemiRoundedPanel panHeadInfo;
    private de.cismet.tools.gui.RoundedPanel panInfo;
    private javax.swing.JPanel panInfoContent;
    private javax.swing.JPanel panwirk;
    private javax.swing.JScrollPane scpWirkung;
    // End of variables declaration//GEN-END:variables

    @Override
    public CidsBean getCidsBean() {
        return cidsBean;
    }

    @Override
    public void setCidsBean(CidsBean cidsBean) {
        if (cidsBean != null) {
            this.cidsBean = cidsBean;
        }
        wbListModel.setElements();
    }

    @Override
    public void dispose() {
        setCidsBean(null);
    }

    @Override
    public void beansDropped(ArrayList<CidsBean> beans) {
        if (cidsBean != null) {
            for (CidsBean bean : beans) {
                if (bean.getClass().getName().equals("de.cismet.cids.dynamics.Wk_fg")) {
                    addWB(WB_PROPERTIES[0], bean);
                } else if (bean.getClass().getName().equals("de.cismet.cids.dynamics.Wk_sg")) {
                    addWB(WB_PROPERTIES[1], bean);
                } else if (bean.getClass().getName().equals("de.cismet.cids.dynamics.Wk_kg")) {
                    addWB(WB_PROPERTIES[2], bean);
                } else if (bean.getClass().getName().equals("de.cismet.cids.dynamics.Wk_gw")) {
                    addWB(WB_PROPERTIES[3], bean);
                }
            }
        }
    }


    private void removeBean(String propertyName, CidsBean bean) {
        final Object beanColl = cidsBean.getProperty(propertyName);
        if (beanColl instanceof Collection) {
            ((Collection) beanColl).remove(bean);
        }
    }


    private void addWB(String propertyName, CidsBean propertyEntry) {
        Collection<CidsBean> collection = (Collection<CidsBean>)cidsBean.getProperty(propertyName);

        if (collection == null) {
            LOG.error("Collectiom of property " + propertyName + " is null");
            return;
        }

        collection.add(propertyEntry);
        wbListModel.addElement(propertyEntry);
    }

    

    private class WbModel implements ListModel {
        List<ListDataListener> listDataListener = new ArrayList<ListDataListener>();
        List<WB_Wrapper> elements = new ArrayList<WB_Wrapper>();

        public WbModel() {
            setElements();
        }

        @Override
        public int getSize() {
            return elements.size();
        }

        @Override
        public Object getElementAt(int index) {
            return elements.get(index);
        }

        @Override
        public void addListDataListener(ListDataListener l) {
            listDataListener.add(l);
        }

        @Override
        public void removeListDataListener(ListDataListener l) {
            listDataListener.remove(l);
        }


        public void removeElement(WB_Wrapper o) {
            elements.remove(o);
            fireContentChangedEvent();
        }

        public void addElement(CidsBean o) {
            elements.add(new WB_Wrapper(o));
            fireContentChangedEvent();
        }


        private void fireContentChangedEvent() {
            ListDataEvent event = new ListDataEvent(this, ListDataEvent.CONTENTS_CHANGED, 0, elements.size());

            for (ListDataListener listener : listDataListener) {
                listener.contentsChanged(event);
            }
        }

        public void setElements() {
            elements.clear();
            if (cidsBean != null) {
                for (String propName : WB_PROPERTIES) {
                    Collection<CidsBean> collection = (Collection<CidsBean>)cidsBean.getProperty(propName);

                    if (collection != null) {
                        for (CidsBean bean : collection) {
                            elements.add(new WB_Wrapper(bean));
                        }
                    }
                }
            }

            fireContentChangedEvent();
        }


        public void clear() {
            elements.clear();
            fireContentChangedEvent();
        }

        

        private class WB_Wrapper {
            private CidsBean wrappedBean;

            public WB_Wrapper(CidsBean wrappedBean) {
                this.wrappedBean = wrappedBean;
            }


            public CidsBean getWrappedBean() {
                return wrappedBean;
            }

            @Override
            public String toString() {
                return wrappedBean.toString();
            }
        }

        
    }
}
