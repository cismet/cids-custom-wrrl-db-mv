/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.objecteditors.wrrl_db_mv;

import Sirius.navigator.connection.SessionManager;

import Sirius.server.search.CidsServerSearch;

import com.vividsolutions.jts.geom.Geometry;

import java.awt.EventQueue;

import java.util.ArrayList;
import java.util.Collection;

import de.cismet.cids.custom.wrrl_db_mv.util.CidsBeanSupport;
import de.cismet.cids.custom.wrrl_db_mv.server.search.WkkSearch;

import de.cismet.cids.dynamics.CidsBean;
import de.cismet.cids.dynamics.DisposableCidsBeanStore;

import de.cismet.cids.editors.DefaultCustomObjectEditor;

/**
 * DOCUMENT ME!
 *
 * @author   therter
 * @version  $Revision$, $Date$
 */
public class KartierabschnittUebersicht extends javax.swing.JPanel implements DisposableCidsBeanStore {

    //~ Static fields/initializers ---------------------------------------------

    private static final org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(
            KartierabschnittUebersicht.class);

    //~ Instance fields --------------------------------------------------------

    private CidsBean cidsBean;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblGewaesserabschnitt;
    private javax.swing.JLabel lblGewaessername;
    private javax.swing.JLabel lblHeading;
    private javax.swing.JLabel lblSpacing;
    private javax.swing.JLabel lblStation;
    private javax.swing.JLabel lblValGewaesserabschnitt;
    private javax.swing.JLabel lblValGewaessername;
    private javax.swing.JLabel lblValStation;
    private javax.swing.JLabel lblValWkName;
    private javax.swing.JLabel lblWk;
    private de.cismet.tools.gui.SemiRoundedPanel panHeadInfo;
    private de.cismet.tools.gui.RoundedPanel panInfo;
    private javax.swing.JPanel panInfoContent;
    private javax.swing.JSeparator sepMiddle;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form WkFgPanOne.
     */
    public KartierabschnittUebersicht() {
        initComponents();
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        panInfo = new de.cismet.tools.gui.RoundedPanel();
        panHeadInfo = new de.cismet.tools.gui.SemiRoundedPanel();
        lblHeading = new javax.swing.JLabel();
        panInfoContent = new javax.swing.JPanel();
        lblGewaessername = new javax.swing.JLabel();
        lblGewaesserabschnitt = new javax.swing.JLabel();
        lblWk = new javax.swing.JLabel();
        lblStation = new javax.swing.JLabel();
        lblSpacing = new javax.swing.JLabel();
        sepMiddle = new javax.swing.JSeparator();
        lblValGewaessername = new javax.swing.JLabel();
        lblValGewaesserabschnitt = new javax.swing.JLabel();
        lblValStation = new javax.swing.JLabel();
        lblValWkName = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(1100, 250));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(1100, 250));
        setLayout(new java.awt.BorderLayout());

        panHeadInfo.setBackground(new java.awt.Color(51, 51, 51));
        panHeadInfo.setMinimumSize(new java.awt.Dimension(109, 24));
        panHeadInfo.setPreferredSize(new java.awt.Dimension(109, 24));
        panHeadInfo.setLayout(new java.awt.FlowLayout());

        lblHeading.setForeground(new java.awt.Color(255, 255, 255));
        lblHeading.setText(org.openide.util.NbBundle.getMessage(
                KartierabschnittUebersicht.class,
                "KartierabschnittUebersicht.lblHeading.text")); // NOI18N
        panHeadInfo.add(lblHeading);

        panInfo.add(panHeadInfo, java.awt.BorderLayout.NORTH);

        panInfoContent.setMinimumSize(new java.awt.Dimension(1057, 250));
        panInfoContent.setOpaque(false);
        panInfoContent.setLayout(new java.awt.GridBagLayout());

        lblGewaessername.setText(org.openide.util.NbBundle.getMessage(
                KartierabschnittUebersicht.class,
                "KartierabschnittStammEditor.lblgewaessername.text")); // NOI18N
        lblGewaessername.setMaximumSize(new java.awt.Dimension(120, 17));
        lblGewaessername.setMinimumSize(new java.awt.Dimension(130, 17));
        lblGewaessername.setPreferredSize(new java.awt.Dimension(130, 17));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 10, 5, 5);
        panInfoContent.add(lblGewaessername, gridBagConstraints);

        lblGewaesserabschnitt.setText(org.openide.util.NbBundle.getMessage(
                KartierabschnittUebersicht.class,
                "KartierabschnittStammEditor.lblgewaesserabschnitt.text")); // NOI18N
        lblGewaesserabschnitt.setMinimumSize(new java.awt.Dimension(130, 17));
        lblGewaesserabschnitt.setPreferredSize(new java.awt.Dimension(130, 17));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        panInfoContent.add(lblGewaesserabschnitt, gridBagConstraints);

        lblWk.setText(org.openide.util.NbBundle.getMessage(
                KartierabschnittUebersicht.class,
                "KartierabschnittUebersicht.lblWk.text")); // NOI18N
        lblWk.setMaximumSize(new java.awt.Dimension(120, 17));
        lblWk.setMinimumSize(new java.awt.Dimension(130, 17));
        lblWk.setPreferredSize(new java.awt.Dimension(130, 17));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        panInfoContent.add(lblWk, gridBagConstraints);

        lblStation.setText(org.openide.util.NbBundle.getMessage(
                KartierabschnittUebersicht.class,
                "KartierabschnittUebersicht.lblStation.text")); // NOI18N
        lblStation.setMinimumSize(new java.awt.Dimension(130, 17));
        lblStation.setPreferredSize(new java.awt.Dimension(130, 17));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        panInfoContent.add(lblStation, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.weighty = 1.0;
        panInfoContent.add(lblSpacing, gridBagConstraints);

        sepMiddle.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(15, 15, 5, 25);
        panInfoContent.add(sepMiddle, gridBagConstraints);

        lblValGewaessername.setMinimumSize(new java.awt.Dimension(150, 17));
        lblValGewaessername.setPreferredSize(new java.awt.Dimension(150, 17));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 5, 10);
        panInfoContent.add(lblValGewaessername, gridBagConstraints);

        lblValGewaesserabschnitt.setMinimumSize(new java.awt.Dimension(150, 17));
        lblValGewaesserabschnitt.setPreferredSize(new java.awt.Dimension(150, 17));

        final org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.gewaesser_abschnitt}"),
                lblValGewaesserabschnitt,
                org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceNullValue("");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        panInfoContent.add(lblValGewaesserabschnitt, gridBagConstraints);

        lblValStation.setMinimumSize(new java.awt.Dimension(150, 17));
        lblValStation.setPreferredSize(new java.awt.Dimension(150, 17));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 5, 10);
        panInfoContent.add(lblValStation, gridBagConstraints);

        lblValWkName.setMinimumSize(new java.awt.Dimension(150, 17));
        lblValWkName.setPreferredSize(new java.awt.Dimension(150, 17));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        panInfoContent.add(lblValWkName, gridBagConstraints);

        panInfo.add(panInfoContent, java.awt.BorderLayout.CENTER);

        add(panInfo, java.awt.BorderLayout.CENTER);

        bindingGroup.bind();
    } // </editor-fold>//GEN-END:initComponents

    @Override
    public CidsBean getCidsBean() {
        return cidsBean;
    }

    @Override
    public void setCidsBean(final CidsBean cidsBean) {
        bindingGroup.unbind();

        if (cidsBean != null) {
            this.cidsBean = cidsBean;
            DefaultCustomObjectEditor.setMetaClassInformationToMetaClassStoreComponentsInBindingGroup(
                bindingGroup,
                this.cidsBean);
            bindingGroup.bind();
            new Thread(new Runnable() {

                    @Override
                    public void run() {
                        refreshLabels();
                    }
                }).start();
        } else {
            lblValGewaessername.setText("");
            lblValStation.setText("");
            lblValWkName.setText("");
        }
    }

    /**
     * DOCUMENT ME!
     */
    public void refreshLabels() {
        String gew = CidsBeanSupport.FIELD_NOT_SET;
        String statString = CidsBeanSupport.FIELD_NOT_SET;
        final CidsBean statLine = (CidsBean)cidsBean.getProperty("linie");
        CidsBean statVon = null;
        CidsBean statBis = null;
        CidsBean route = null;
        if (statLine != null) {
            statVon = (CidsBean)statLine.getProperty("von");
            statBis = (CidsBean)statLine.getProperty("bis");
            if (statVon != null) {
                route = (CidsBean)statVon.getProperty("route");
                if (route != null) {
                    gew = String.valueOf(route.getProperty("routenname"));
                }

                if (statBis != null) {
                    statString = String.valueOf(statVon.getProperty("wert")) + " - "
                                + String.valueOf(statBis.getProperty("wert"));
                }
            }
        }

        String wkk = CidsBeanSupport.FIELD_NOT_SET;
        try {
            if (statLine != null) {
                final CidsBean geomEntry = (CidsBean)statLine.getProperty("geom");
                final Geometry geom = ((geomEntry != null) ? (Geometry)geomEntry.getProperty("geo_field") : null);
                final String geomString = geom.toText();
                final CidsServerSearch search = new WkkSearch(geomString, String.valueOf(route.getProperty("id")));
                final Collection res = SessionManager.getProxy()
                            .customServerSearch(SessionManager.getSession().getUser(), search);
                final ArrayList<ArrayList> resArray = (ArrayList<ArrayList>)res;

                if ((resArray != null) && (resArray.size() > 0) && (resArray.get(0).size() > 0)) {
                    final Object o = resArray.get(0).get(0);

                    if (o instanceof String) {
                        wkk = o.toString();
                    }
                } else {
                    LOG.error("Server error in getWk_k(). Cids server search return null. " // NOI18N
                                + "See the server logs for further information");     // NOI18N
                }
            }
        } catch (final Exception e) {
            LOG.error("Error while determining the water body", e);
        }

        final String gewaessername = gew;
        final String stationierung = statString;
        final String wk_name = wkk;

        EventQueue.invokeLater(new Runnable() {

                @Override
                public void run() {
                    lblValGewaessername.setText(gewaessername);
                    lblValStation.setText(stationierung);
                    lblValWkName.setText(wk_name);
                }
            });
    }

    @Override
    public void dispose() {
        bindingGroup.unbind();
    }
}
